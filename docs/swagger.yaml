basePath: /
definitions:
  domain.Product:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: number
    type: object
  dto.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.UserRegisterRequest:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - gender
    - name
    - password
    - username
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      email:
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - gender
    - name
    - username
    type: object
  http.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  http.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample API server for GoHex application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoHex API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Login user
      tags:
      - users
  /logout:
    post:
      description: Log out the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout user
      tags:
      - users
  /products:
    get:
      description: Get a list of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/domain.Product'
                  type: array
              type: object
      summary: Get all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided information
      parameters:
      - description: Product info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      description: Get a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Product'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Get a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product with the provided information
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product info
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/domain.Product'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided information
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Register a new user
      tags:
      - users
  /users/profile:
    get:
      description: Get the authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: User update info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - users
schemes:
- http
- https
swagger: "2.0"
